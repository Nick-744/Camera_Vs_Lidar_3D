{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to vvrpywork","text":""},{"location":"index.html#project-overview","title":"Project Overview","text":"<p>API reference documentation for the <code>vvrpywork</code> package.</p> <p>Please keep in mind that the package (and, by extension, this documentation) is still a Work-in-Progress.</p>"},{"location":"constants.html","title":"Constants","text":""},{"location":"constants.html#vvrpywork.constants.Key","title":"<code>Key</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_SHIFT","title":"<code>MOD_SHIFT = key.MOD_SHIFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_CTRL","title":"<code>MOD_CTRL = key.MOD_CTRL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_ALT","title":"<code>MOD_ALT = key.MOD_ALT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_CAPSLOCK","title":"<code>MOD_CAPSLOCK = key.MOD_CAPSLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_NUMLOCK","title":"<code>MOD_NUMLOCK = key.MOD_NUMLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_WINDOWS","title":"<code>MOD_WINDOWS = key.MOD_WINDOWS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_COMMAND","title":"<code>MOD_COMMAND = key.MOD_COMMAND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_OPTION","title":"<code>MOD_OPTION = key.MOD_OPTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_SCROLLLOCK","title":"<code>MOD_SCROLLLOCK = key.MOD_SCROLLLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_FUNCTION","title":"<code>MOD_FUNCTION = key.MOD_FUNCTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOD_ACCEL","title":"<code>MOD_ACCEL = key.MOD_ACCEL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BACKSPACE","title":"<code>BACKSPACE = key.BACKSPACE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.TAB","title":"<code>TAB = key.TAB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LINEFEED","title":"<code>LINEFEED = key.LINEFEED</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.CLEAR","title":"<code>CLEAR = key.CLEAR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RETURN","title":"<code>RETURN = key.RETURN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ENTER","title":"<code>ENTER = key.ENTER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PAUSE","title":"<code>PAUSE = key.PAUSE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SCROLLLOCK","title":"<code>SCROLLLOCK = key.SCROLLLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SYSREQ","title":"<code>SYSREQ = key.SYSREQ</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ESCAPE","title":"<code>ESCAPE = key.ESCAPE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.HOME","title":"<code>HOME = key.HOME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LEFT","title":"<code>LEFT = key.LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.UP","title":"<code>UP = key.UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RIGHT","title":"<code>RIGHT = key.RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.DOWN","title":"<code>DOWN = key.DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PAGEUP","title":"<code>PAGEUP = key.PAGEUP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PAGEDOWN","title":"<code>PAGEDOWN = key.PAGEDOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.END","title":"<code>END = key.END</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BEGIN","title":"<code>BEGIN = key.BEGIN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.DELETE","title":"<code>DELETE = key.DELETE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SELECT","title":"<code>SELECT = key.SELECT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PRINT","title":"<code>PRINT = key.PRINT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.EXECUTE","title":"<code>EXECUTE = key.EXECUTE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.INSERT","title":"<code>INSERT = key.INSERT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.UNDO","title":"<code>UNDO = key.UNDO</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.REDO","title":"<code>REDO = key.REDO</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MENU","title":"<code>MENU = key.MENU</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.FIND","title":"<code>FIND = key.FIND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.CANCEL","title":"<code>CANCEL = key.CANCEL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.HELP","title":"<code>HELP = key.HELP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BREAK","title":"<code>BREAK = key.BREAK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MODESWITCH","title":"<code>MODESWITCH = key.MODESWITCH</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SCRIPTSWITCH","title":"<code>SCRIPTSWITCH = key.SCRIPTSWITCH</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.FUNCTION","title":"<code>FUNCTION = key.FUNCTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_UP","title":"<code>MOTION_UP = key.MOTION_UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_RIGHT","title":"<code>MOTION_RIGHT = key.MOTION_RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_DOWN","title":"<code>MOTION_DOWN = key.MOTION_DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_LEFT","title":"<code>MOTION_LEFT = key.MOTION_LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_NEXT_WORD","title":"<code>MOTION_NEXT_WORD = key.MOTION_NEXT_WORD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_PREVIOUS_WORD","title":"<code>MOTION_PREVIOUS_WORD = key.MOTION_PREVIOUS_WORD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_BEGINNING_OF_LINE","title":"<code>MOTION_BEGINNING_OF_LINE = key.MOTION_BEGINNING_OF_LINE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_END_OF_LINE","title":"<code>MOTION_END_OF_LINE = key.MOTION_END_OF_LINE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_NEXT_PAGE","title":"<code>MOTION_NEXT_PAGE = key.MOTION_NEXT_PAGE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_PREVIOUS_PAGE","title":"<code>MOTION_PREVIOUS_PAGE = key.MOTION_PREVIOUS_PAGE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_BEGINNING_OF_FILE","title":"<code>MOTION_BEGINNING_OF_FILE = key.MOTION_BEGINNING_OF_FILE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_END_OF_FILE","title":"<code>MOTION_END_OF_FILE = key.MOTION_END_OF_FILE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_BACKSPACE","title":"<code>MOTION_BACKSPACE = key.MOTION_BACKSPACE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_DELETE","title":"<code>MOTION_DELETE = key.MOTION_DELETE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_COPY","title":"<code>MOTION_COPY = key.MOTION_COPY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MOTION_PASTE","title":"<code>MOTION_PASTE = key.MOTION_PASTE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUMLOCK","title":"<code>NUMLOCK = key.NUMLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_SPACE","title":"<code>NUM_SPACE = key.NUM_SPACE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_TAB","title":"<code>NUM_TAB = key.NUM_TAB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_ENTER","title":"<code>NUM_ENTER = key.NUM_ENTER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_F1","title":"<code>NUM_F1 = key.NUM_F1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_F2","title":"<code>NUM_F2 = key.NUM_F2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_F3","title":"<code>NUM_F3 = key.NUM_F3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_F4","title":"<code>NUM_F4 = key.NUM_F4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_HOME","title":"<code>NUM_HOME = key.NUM_HOME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_LEFT","title":"<code>NUM_LEFT = key.NUM_LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_UP","title":"<code>NUM_UP = key.NUM_UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_RIGHT","title":"<code>NUM_RIGHT = key.NUM_RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_DOWN","title":"<code>NUM_DOWN = key.NUM_DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_PRIOR","title":"<code>NUM_PRIOR = key.NUM_PRIOR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_PAGE_UP","title":"<code>NUM_PAGE_UP = key.NUM_PAGE_UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_NEXT","title":"<code>NUM_NEXT = key.NUM_NEXT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_PAGE_DOWN","title":"<code>NUM_PAGE_DOWN = key.NUM_PAGE_DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_END","title":"<code>NUM_END = key.NUM_END</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_BEGIN","title":"<code>NUM_BEGIN = key.NUM_BEGIN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_INSERT","title":"<code>NUM_INSERT = key.NUM_INSERT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_DELETE","title":"<code>NUM_DELETE = key.NUM_DELETE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_EQUAL","title":"<code>NUM_EQUAL = key.NUM_EQUAL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_MULTIPLY","title":"<code>NUM_MULTIPLY = key.NUM_MULTIPLY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_ADD","title":"<code>NUM_ADD = key.NUM_ADD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_SEPARATOR","title":"<code>NUM_SEPARATOR = key.NUM_SEPARATOR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_SUBTRACT","title":"<code>NUM_SUBTRACT = key.NUM_SUBTRACT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_DECIMAL","title":"<code>NUM_DECIMAL = key.NUM_DECIMAL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_DIVIDE","title":"<code>NUM_DIVIDE = key.NUM_DIVIDE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_0","title":"<code>NUM_0 = key.NUM_0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_1","title":"<code>NUM_1 = key.NUM_1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_2","title":"<code>NUM_2 = key.NUM_2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_3","title":"<code>NUM_3 = key.NUM_3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_4","title":"<code>NUM_4 = key.NUM_4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_5","title":"<code>NUM_5 = key.NUM_5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_6","title":"<code>NUM_6 = key.NUM_6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_7","title":"<code>NUM_7 = key.NUM_7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_8","title":"<code>NUM_8 = key.NUM_8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.NUM_9","title":"<code>NUM_9 = key.NUM_9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F1","title":"<code>F1 = key.F1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F2","title":"<code>F2 = key.F2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F3","title":"<code>F3 = key.F3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F4","title":"<code>F4 = key.F4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F5","title":"<code>F5 = key.F5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F6","title":"<code>F6 = key.F6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F7","title":"<code>F7 = key.F7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F8","title":"<code>F8 = key.F8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F9","title":"<code>F9 = key.F9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F10","title":"<code>F10 = key.F10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F11","title":"<code>F11 = key.F11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F12","title":"<code>F12 = key.F12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F13","title":"<code>F13 = key.F13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F14","title":"<code>F14 = key.F14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F15","title":"<code>F15 = key.F15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F16","title":"<code>F16 = key.F16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F17","title":"<code>F17 = key.F17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F18","title":"<code>F18 = key.F18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F19","title":"<code>F19 = key.F19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F20","title":"<code>F20 = key.F20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F21","title":"<code>F21 = key.F21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F22","title":"<code>F22 = key.F22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F23","title":"<code>F23 = key.F23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F24","title":"<code>F24 = key.F24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LSHIFT","title":"<code>LSHIFT = key.LSHIFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RSHIFT","title":"<code>RSHIFT = key.RSHIFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LCTRL","title":"<code>LCTRL = key.LCTRL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RCTRL","title":"<code>RCTRL = key.RCTRL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.CAPSLOCK","title":"<code>CAPSLOCK = key.CAPSLOCK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LMETA","title":"<code>LMETA = key.LMETA</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RMETA","title":"<code>RMETA = key.RMETA</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LALT","title":"<code>LALT = key.LALT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RALT","title":"<code>RALT = key.RALT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LWINDOWS","title":"<code>LWINDOWS = key.LWINDOWS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RWINDOWS","title":"<code>RWINDOWS = key.RWINDOWS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LCOMMAND","title":"<code>LCOMMAND = key.LCOMMAND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.RCOMMAND","title":"<code>RCOMMAND = key.RCOMMAND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LOPTION","title":"<code>LOPTION = key.LOPTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ROPTION","title":"<code>ROPTION = key.ROPTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SPACE","title":"<code>SPACE = key.SPACE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.EXCLAMATION","title":"<code>EXCLAMATION = key.EXCLAMATION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.DOUBLEQUOTE","title":"<code>DOUBLEQUOTE = key.DOUBLEQUOTE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.HASH","title":"<code>HASH = key.HASH</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.POUND","title":"<code>POUND = key.POUND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.DOLLAR","title":"<code>DOLLAR = key.DOLLAR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PERCENT","title":"<code>PERCENT = key.PERCENT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.AMPERSAND","title":"<code>AMPERSAND = key.AMPERSAND</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.APOSTROPHE","title":"<code>APOSTROPHE = key.APOSTROPHE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PARENLEFT","title":"<code>PARENLEFT = key.PARENLEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PARENRIGHT","title":"<code>PARENRIGHT = key.PARENRIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ASTERISK","title":"<code>ASTERISK = key.ASTERISK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PLUS","title":"<code>PLUS = key.PLUS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.COMMA","title":"<code>COMMA = key.COMMA</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.MINUS","title":"<code>MINUS = key.MINUS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.PERIOD","title":"<code>PERIOD = key.PERIOD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SLASH","title":"<code>SLASH = key.SLASH</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.COLON","title":"<code>COLON = key.COLON</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.SEMICOLON","title":"<code>SEMICOLON = key.SEMICOLON</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.LESS","title":"<code>LESS = key.LESS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.EQUAL","title":"<code>EQUAL = key.EQUAL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.GREATER","title":"<code>GREATER = key.GREATER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.QUESTION","title":"<code>QUESTION = key.QUESTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.AT","title":"<code>AT = key.AT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BRACKETLEFT","title":"<code>BRACKETLEFT = key.BRACKETLEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BACKSLASH","title":"<code>BACKSLASH = key.BACKSLASH</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BRACKETRIGHT","title":"<code>BRACKETRIGHT = key.BRACKETRIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ASCIICIRCUM","title":"<code>ASCIICIRCUM = key.ASCIICIRCUM</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.UNDERSCORE","title":"<code>UNDERSCORE = key.UNDERSCORE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.GRAVE","title":"<code>GRAVE = key.GRAVE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.QUOTELEFT","title":"<code>QUOTELEFT = key.QUOTELEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.A","title":"<code>A = key.A</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.B","title":"<code>B = key.B</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.C","title":"<code>C = key.C</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.D","title":"<code>D = key.D</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.E","title":"<code>E = key.E</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.F","title":"<code>F = key.F</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.G","title":"<code>G = key.G</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.H","title":"<code>H = key.H</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.I","title":"<code>I = key.I</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.J","title":"<code>J = key.J</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.K","title":"<code>K = key.K</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.L","title":"<code>L = key.L</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.M","title":"<code>M = key.M</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.N","title":"<code>N = key.N</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.O","title":"<code>O = key.O</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.P","title":"<code>P = key.P</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.Q","title":"<code>Q = key.Q</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.R","title":"<code>R = key.R</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.S","title":"<code>S = key.S</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.T","title":"<code>T = key.T</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.U","title":"<code>U = key.U</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.V","title":"<code>V = key.V</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.W","title":"<code>W = key.W</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.X","title":"<code>X = key.X</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.Y","title":"<code>Y = key.Y</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.Z","title":"<code>Z = key.Z</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BRACELEFT","title":"<code>BRACELEFT = key.BRACELEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BAR","title":"<code>BAR = key.BAR</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.BRACERIGHT","title":"<code>BRACERIGHT = key.BRACERIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Key.ASCIITILDE","title":"<code>ASCIITILDE = key.ASCIITILDE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse","title":"<code>Mouse</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSE1","title":"<code>MOUSE1 = mouse.LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSELEFT","title":"<code>MOUSELEFT = mouse.LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSE2","title":"<code>MOUSE2 = mouse.RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSERIGHT","title":"<code>MOUSERIGHT = mouse.RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSE3","title":"<code>MOUSE3 = mouse.MIDDLE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSEMIDDLE","title":"<code>MOUSEMIDDLE = mouse.MIDDLE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSE4","title":"<code>MOUSE4 = mouse.MOUSE4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Mouse.MOUSE5","title":"<code>MOUSE5 = mouse.MOUSE5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color","title":"<code>Color</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.RED","title":"<code>RED = (1, 0, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.BLUE","title":"<code>BLUE = (0, 0, 1, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.GREY","title":"<code>GREY = (0.4, 0.4, 0.4, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.GRAY","title":"<code>GRAY = (0.4, 0.4, 0.4, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.CYAN","title":"<code>CYAN = (0, 1, 1, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.WHITE","title":"<code>WHITE = (1, 1, 1, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.GREEN","title":"<code>GREEN = (0, 1, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.BLACK","title":"<code>BLACK = (0, 0, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.YELLOW","title":"<code>YELLOW = (1, 1, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.ORANGE","title":"<code>ORANGE = (1, 0.4, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.MAGENTA","title":"<code>MAGENTA = (1, 0, 1, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.DARKRED","title":"<code>DARKRED = (0.55, 0, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.DARKORANGE","title":"<code>DARKORANGE = (1, 0.55, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.DARKGREEN","title":"<code>DARKGREEN = (0, 0.4, 0, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"constants.html#vvrpywork.constants.Color.YELLOWGREEN","title":"<code>YELLOWGREEN = (0.6, 0.8, 0.2, 1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"scene.html","title":"Scene","text":"<p>Implements objects to represent 2D and 3D scenes containing shapes.</p>"},{"location":"scene.html#vvrpywork.scene.Scene2D","title":"<code>Scene2D(width, height, caption=None, resizable=False)</code>","text":"<p>A class representing a 2D Scene.</p> <p>This class is meant to be inherited in order to create your own 2D scene. Calling Scene2D.init will set up the scene and running Scene2D.mainloop will display a window with the scene. There are several methods that act as event listeners and can be overridden by the subclass.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the window, in pixels.</p> required <code>height</code> <code>int</code> <p>The height of the window, in pixels.</p> required <code>caption</code> <code>None | str</code> <p>The title of the window.</p> <code>None</code> <code>resizable</code> <code>bool</code> <p>Whether the window is resizable.</p> <code>False</code>"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_press","title":"<code>on_mouse_press(x, y, button, modifiers)</code>","text":"<p>Is called when a mouse button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse.</p> required <code>button</code> <code>MouseType</code> <p>Mouse button pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_drag","title":"<code>on_mouse_drag(x, y, dx, dy, buttons, modifiers)</code>","text":"<p>Is called when the mouse moves while mouse buttons are being pressed.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse at the start of the event.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse at the start of the event.</p> required <code>dx</code> <code>Number</code> <p>Change in X coordinate.</p> required <code>dy</code> <code>Number</code> <p>Change in Y coordinate.</p> required <code>buttons</code> <code>MouseType</code> <p>Mouse buttons pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_release","title":"<code>on_mouse_release(x, y, button, modifiers)</code>","text":"<p>Is called when a mouse button is released.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse.</p> required <code>button</code> <code>MouseType</code> <p>Mouse button released.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_key_press","title":"<code>on_key_press(symbol, modifiers)</code>","text":"<p>Is called when a key is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>KeyType</code> <p>Key symbol pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_key_release","title":"<code>on_key_release(symbol, modifiers)</code>","text":"<p>Is called when a key is released.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>KeyType</code> <p>Key symbol released.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.on_idle","title":"<code>on_idle()</code>","text":"<p>Is scheduled to be called every frame.</p>"},{"location":"scene.html#vvrpywork.scene.Scene2D.mainLoop","title":"<code>mainLoop(max_fps=60)</code>","text":"<p>Starts the main loop of the 2D scene.</p> <p>Parameters:</p> Name Type Description Default <code>max_fps</code> <code>int</code> <p>Maximum frames per second.</p> <code>60</code>"},{"location":"scene.html#vvrpywork.scene.Scene2D.addShape","title":"<code>addShape(shape, name=None)</code>","text":"<p>Adds a shape to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape | ShapeSet</code> <p>The shape to add.</p> required <code>name</code> <code>None | str</code> <p>Name of the shape.</p> <code>None</code>"},{"location":"scene.html#vvrpywork.scene.Scene2D.updateShape","title":"<code>updateShape(name)</code>","text":"<p>Update a shape in the scene.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the shape to update.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene2D.removeShape","title":"<code>removeShape(name)</code>","text":"<p>Removes a shape from the scene.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the shape to remove.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D","title":"<code>Scene3D(width, height, caption=None, output=False, n_sliders=0)</code>","text":"<p>A class representing a 3D Scene.</p> <p>This class is meant to be inherited in order to create your own 3D scene. Calling Scene3D.init will set up the scene and running Scene3D.mainloop will display a window with the scene. There are several methods that act as event listeners and can be overridden by the subclass.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the window, in pixels.</p> required <code>height</code> <code>int</code> <p>The height of the window, in pixels.</p> required <code>caption</code> <code>None | str</code> <p>The title of the window.</p> <code>None</code> <code>output</code> <code>bool</code> <p>Whether to display output text on the left side.</p> <code>False</code> <code>n_sliders</code> <code>int</code> <p>The number of sliders to display on the left side.</p> <code>0</code>"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_press","title":"<code>on_mouse_press(x, y, z, button, modifiers)</code>","text":"<p>Is called when a mouse button is pressed.</p> <p>Is called when a mouse button is pressed. Use the world_space decorator if you wish to get the world space coordinates of the mouse.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse, in screen space.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse, in screen space.</p> required <code>z</code> <code>Number | Any</code> <p>Is always numpy.inf.</p> required <code>button</code> <code>MouseType</code> <p>Mouse button pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_drag","title":"<code>on_mouse_drag(x, y, z, dx, dy, dz, buttons, modifiers)</code>","text":"<p>Is called when the mouse moves while mouse buttons are being pressed.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse at the start of the event, in screen space.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse at the start of the event, in screen space.</p> required <code>z</code> <code>Number | Any</code> <p>Is always numpy.inf.</p> required <code>dx</code> <code>Number</code> <p>Change in X coordinate, in screen space.</p> required <code>dy</code> <code>Number</code> <p>Change in Y coordinate, in screen space.</p> required <code>dz</code> <code>Number | Any</code> <p>Is always np.inf.</p> required <code>buttons</code> <code>MouseType</code> <p>Mouse buttons pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_release","title":"<code>on_mouse_release(x, y, z, button, modifiers)</code>","text":"<p>Is called when a mouse button is released.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>X coordinate of the mouse, in screen space.</p> required <code>y</code> <code>Number</code> <p>Y coordinate of the mouse, in screen space.</p> required <code>z</code> <code>Number | Any</code> <p>Is always numpy.inf.</p> required <code>button</code> <code>MouseType</code> <p>Mouse button released.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_key_press","title":"<code>on_key_press(symbol, modifiers)</code>","text":"<p>Is called when a key is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>KeyType</code> <p>Key symbol pressed.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_key_release","title":"<code>on_key_release(symbol, modifiers)</code>","text":"<p>Is called when a key is released.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>KeyType</code> <p>Key symbol released.</p> required <code>modifiers</code> <code>ModifierType</code> <p>Modifier keys pressed.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_idle","title":"<code>on_idle()</code>","text":"<p>Is scheduled to be called every frame.</p>"},{"location":"scene.html#vvrpywork.scene.Scene3D.on_slider_change","title":"<code>on_slider_change(slider_id, value)</code>","text":"<p>Is called when a slider is changed.</p> <p>Parameters:</p> Name Type Description Default <code>slider_id</code> <code>int</code> <p>The id of the slider that was changed.</p> required <code>value</code> <code>float</code> <p>The new value of the slider.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.mainLoop","title":"<code>mainLoop()</code>","text":"<p>Starts the main loop of the 3D scene.</p>"},{"location":"scene.html#vvrpywork.scene.Scene3D.addShape","title":"<code>addShape(shape, name=None, quick=False)</code>","text":"<p>Adds a shape to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape | ShapeSet</code> <p>The shape to add.</p> required <code>name</code> <code>None | str</code> <p>Name of the shape.</p> <code>None</code> <code>quick</code> <code>bool</code> <p>If this method is called in rapid succession e.g., inside Scene3d.on_idle, set quick=True, which might prevent some crashes.</p> <code>False</code>"},{"location":"scene.html#vvrpywork.scene.Scene3D.updateShape","title":"<code>updateShape(name, quick=False)</code>","text":"<p>Update a shape in the scene.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the shape to update.</p> required <code>quick</code> <code>bool</code> <p>If this method is called in rapid succession e.g., inside Scene3d.on_idle, set quick=True, which might prevent some crashes.</p> <code>False</code>"},{"location":"scene.html#vvrpywork.scene.Scene3D.removeShape","title":"<code>removeShape(name)</code>","text":"<p>Removes a shape from the scene.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the shape to remove.</p> required"},{"location":"scene.html#vvrpywork.scene.Scene3D.print","title":"<code>print(*args, **kwargs)</code>","text":"<p>Prints text to the scene's text output.</p> <p>Prints text to the scene's text output, on the left side of the window. Supports the same arguments as the built-in print function.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code>"},{"location":"scene.html#vvrpywork.scene.Scene3D.set_slider_value","title":"<code>set_slider_value(slider_id, value, no_callback=False)</code>","text":"<p>Sets the value of a slider, programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>slider_id</code> <code>int</code> <p>The id of the slider to set.</p> required <code>value</code> <code>Number</code> <p>The value to set the slider to.</p> required <code>no_callback</code> <code>bool</code> <p>If True, Scene3D.on_slider_change will not be triggered.</p> <code>False</code>"},{"location":"scene.html#vvrpywork.scene.get_rotation_matrix","title":"<code>get_rotation_matrix(angle, axis)</code>","text":"<p>Returns a rotation matrix from its axis-angle representation.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>Rotation angle.</p> required <code>axis</code> <code>(ndarray, list, tuple)</code> <p>Rotation axis.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The respective rotation matrix.</p>"},{"location":"scene.html#vvrpywork.scene.world_space","title":"<code>world_space(func)</code>","text":"<p>Decorator to convert screen coordinates to world coordinates.</p> <p>Use this decorator to convert screen-space coordinates to world-space coordinates in Scene3D.on_mouse_press, Scene3D.on_mouse_drag, and Scene3D.on_mouse_release. In that case, x, y, and z will all correspond to the world-space coordinates of a projected ray from the mouse.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>Function to decorate.</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>Decorated function.</p>"},{"location":"shapes.html","title":"Shapes","text":""},{"location":"shapes.html#vvrpywork.shapes.abstract.Shape","title":"<code>Shape</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract Base Class to represent shapes.</p>"},{"location":"shapes.html#vvrpywork.shapes.abstract.ShapeSet","title":"<code>ShapeSet</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract Base Class to represent shape sets.</p>"},{"location":"shapes.html#_1","title":"Shapes","text":""},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D","title":"<code>Point2D(p, size=1.0, resolution=None, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a point in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the point.</p> required <code>size</code> <code>Number</code> <p>The size of the displayed point.</p> <code>1.0</code> <code>resolution</code> <code>None | int</code> <p>The resolution of the displayed point. If <code>None</code>, it will be calculated automatically.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed point (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the x-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the y-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's size.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.resolution","title":"<code>resolution: None | int</code>  <code>property</code>","text":"<p>The point's resolution.</p> <p>The point is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The point's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.distanceSq","title":"<code>distanceSq(p)</code>","text":"<p>Calculates the squared distance from a second point.</p> <p>Calculates the squared Euclidean distance between this and another point. It doesn't take the square root of the result and is, therefore, faster than calling <code>distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D</code> <p>The second point, the squared distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>Number</code> <p>The squared distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.point2d.Point2D.distance","title":"<code>distance(p)</code>","text":"<p>Calculates the distance from a second point.</p> <p>Calculates the Euclidean distance between this and another point. If you do not need the exact distance, you may want to look into using <code>distanceSq</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D</code> <p>The second point, the distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D","title":"<code>Line2D(p1, p2, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a line segment in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the first endpoint.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the second endpoint.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed line segment.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed line segment (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's width.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.getPointFrom","title":"<code>getPointFrom()</code>","text":"<p>Returns the line segment's first endpoint.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The line segment's first endpoint as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.getPointTo","title":"<code>getPointTo()</code>","text":"<p>Returns the line segment's second endpoint.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The line segment's second endpoint as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.length","title":"<code>length()</code>","text":"<p>Calculates the length of the line segment.</p> <p>Returns:</p> Type Description <code>float</code> <p>The length of the line segment.</p>"},{"location":"shapes.html#vvrpywork.shapes.line2d.Line2D.isOnRight","title":"<code>isOnRight(point)</code>","text":"<p>Determines whether a point is to the right of the line.</p> <p>Determines whether a point is to the right of the line defined by this line segment.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's on the right).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is on the right, <code>False</code> otherwise (incl. if it's on the line itself).</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D","title":"<code>Triangle2D(p1, p2, p3, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a triangle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the first vertex.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the second vertex.</p> required <code>p3</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the third vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed triangle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed triangle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the triangle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.x3","title":"<code>x3: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the third vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.y3","title":"<code>y3: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the third vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The triangle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The triangle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the triangle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.getPoint1","title":"<code>getPoint1()</code>","text":"<p>Returns the triangle's first vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's first vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.getPoint2","title":"<code>getPoint2()</code>","text":"<p>Returns the triangle's second vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's second vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.getPoint3","title":"<code>getPoint3()</code>","text":"<p>Returns the triangle's third vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's third vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.getCircumCircle","title":"<code>getCircumCircle()</code>","text":"<p>Returns the triangle's circumcircle.</p> <p>Returns:</p> Type Description <code>Circle2D</code> <p>The triangle's circumcircle as a <code>Circle2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.triangle2d.Triangle2D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the triangle.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's inside the triangle).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the triangle (incl. the edges), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D","title":"<code>Circle2D(p, radius, resolution=None, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a circle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the center.</p> required <code>radius</code> <code>Number</code> <p>The circle's radius.</p> required <code>resolution</code> <code>None | int</code> <p>The resolution of the displayed circle. If <code>None</code>, it will be calculated automatically.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed circle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed circle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the circle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the circle's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the circle's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.radius","title":"<code>radius: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's radius.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.resolution","title":"<code>resolution: None | int</code>  <code>property</code>","text":"<p>The circle's resolution.</p> <p>The circle is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the circle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.getPointCenter","title":"<code>getPointCenter()</code>","text":"<p>Returns the circle's center.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The circle's center point as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.circle2d.Circle2D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the circle.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's inside the circle).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the circle (incl. the outline), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D","title":"<code>Rectangle2D(p1, p2, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a rectangle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of one vertex.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of another vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed rectangle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed rectangle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the rectangle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.x_min","title":"<code>x_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the bottom-left vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.y_min","title":"<code>y_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the bottom-left vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.x_max","title":"<code>x_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the top-right vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.y_max","title":"<code>y_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the top-right vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The rectangle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The rectangle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the rectangle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.rectangle2d.Rectangle2D.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the rectangle by a vector.</p> <p>Translates the rectangle by <code>translation</code>. This is mostly useful when the min/max coordinate values would switch if you applied the translation individually to each vertex.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The translation vector. Its coordinates will be added to the rectangle's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D","title":"<code>PointSet2D(points=None, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of points in 2D space.</p> <p>Inits a PointSet2D containing <code>points</code>. If <code>points</code> is <code>None</code>, the pointset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the pointset.</p> <code>None</code> <code>size</code> <code>Number</code> <p>The size of the displayed points.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed points (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the displayed points.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.getPointAt","title":"<code>getPointAt(index)</code>","text":"<p>Returns the point at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired point is placed inside the pointset.</p> required <p>Returns:</p> Type Description <code>Point2D</code> <p>The point at the specified index as a <code>Point2D</code> object. It retains its size and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.add","title":"<code>add(point)</code>","text":"<p>Appends a point to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The <code>Point2D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.createRandom","title":"<code>createRandom(bound, num_points, seed=None, color=(0, 0, 0))</code>","text":"<p>Appends random points to the pointset.</p> <p>Uniformly generates random points inside a region and appends them to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>bound</code> <code>Rectangle2D | Circle2D</code> <p>The area inside of which the random points will be generated.</p> required <code>num_points</code> <code>int</code> <p>How many points to generate.</p> required <code>seed</code> <code>None | int | str</code> <p>An optional seed for the RNG.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the generated points.</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a point from the pointset.</p> <p>Removes a point from the pointset's specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed point is placed inside the pointset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset2d.PointSet2D.clear","title":"<code>clear()</code>","text":"<p>Clears the pointset.</p> <p>Clears the pointset, completely removing all points and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D","title":"<code>LineSet2D(points=None, lines=None, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of lines in 2D space.</p> <p>Inits a LineSet2D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in pairs i.e., (0, 1), (2, 3), etc.</p> <p>If <code>points</code> is <code>None</code>, the lineset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the lineset.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.lines","title":"<code>lines: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The point indices indicating lines of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The width of the displayed lines.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The lines' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.getLineAt","title":"<code>getLineAt(index)</code>","text":"<p>Returns the line at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired line is placed inside the lineset.</p> required <p>Returns:</p> Type Description <code>Line2D</code> <p>The line at the specified index as a <code>Line2D</code> object. It retains its width and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.add","title":"<code>add(line)</code>","text":"<p>Appends a line to the lineset.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>Line2D</code> <p>The <code>Line2D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a line from the lineset.</p> <p>Removes a line from the lineset's specified index (does not affect LineSet2D.points in any way).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed line is placed inside the lineset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.lineset2d.LineSet2D.clear","title":"<code>clear()</code>","text":"<p>Clears the lineset.</p> <p>Clears the lineset, completely removing all points, lines and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.polygon2d.Polygon2D","title":"<code>Polygon2D(points=None, lines=None, width=1, color=(0, 0, 0), reorderIfNecessary=False)</code>","text":"<p>             Bases: <code>LineSet2D</code></p> <p>A class used to represent an arbitrary polygon in 2D space.</p> <p>Inits a Polygon2D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in sequence i.e., (0, 1), (1, 2), ..., (n-1, n), (n, 0).</p> <p>If <code>points</code> is <code>None</code>, the polygon will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | PointSet2D | NDArray | List | Tuple</code> <p>The points of the polygon.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>reorderIfNecessary</code> <code>bool</code> <p>If <code>True</code> (and <code>lines</code> is <code>None</code>), the points will be reordered to attempt to make a non - self-intersecting polygon.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.polygon2d.Polygon2D.create_from_lineset","title":"<code>create_from_lineset(lineset, width=1, color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a Polygon2D object from a Lineset2D object.</p> <p>Parameters:</p> Name Type Description Default <code>lineset</code> <code>LineSet2D</code> <p>The lineset to be turned into a polygon.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <p>Returns:</p> Type Description <code>Polygon2D</code> <p>The Polygon2D object created from the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D","title":"<code>Label2D(p, text, size=32, font='', bold=False, italic=False, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a text label in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the label's anchor (center).</p> required <code>text</code> <code>str</code> <p>The text of the label.</p> required <code>size</code> <code>Number</code> <p>The font size of the label.</p> <code>32</code> <code>font</code> <code>str</code> <p>The name of an installed font.</p> <code>''</code> <code>bold</code> <code>bool</code> <p>Whether the text should be in bold.</p> <code>False</code> <code>italic</code> <code>bool</code> <p>Whether the text should be in italic.</p> <code>False</code> <code>color</code> <code>ColorType</code> <p>The color of the text (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor x-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor y-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's text.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font size.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.font","title":"<code>font: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.bold","title":"<code>bold: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the text should be in bold.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.italic","title":"<code>italic: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the text should be in italic.</p>"},{"location":"shapes.html#vvrpywork.shapes.label2d.Label2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font color in RGBA format.</p>"},{"location":"shapes.html#_2","title":"Shapes","text":""},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D","title":"<code>Point3D(p, size=1, resolution=20, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a point in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the point.</p> required <code>size</code> <code>Number</code> <p>The size of the displayed point.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed point.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed point (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the x-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the y-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the z-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's size.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The point's resolution.</p> <p>The point is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The point's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.distanceSq","title":"<code>distanceSq(p)</code>","text":"<p>Calculates the squared distance from a second point.</p> <p>Calculates the squared Euclidean distance between this and another point. It doesn't take the square root of the result and is, therefore, faster than calling <code>distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D</code> <p>The second point, the squared distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>Number</code> <p>The squared distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.point3d.Point3D.distance","title":"<code>distance(p)</code>","text":"<p>Calculates the distance from a second point.</p> <p>Calculates the Euclidean distance between this and another point. If you do not need the exact distance, you may want to look into using <code>distanceSq</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D</code> <p>The second point, the distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D","title":"<code>Line3D(p1, p2, width=1, resolution=20, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a line segment in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the first endpoint.</p> required <code>p2</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the second endpoint.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed line segment.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed line.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed line segment (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.z1","title":"<code>z1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.z2","title":"<code>z2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.width","title":"<code>width: Number</code>  <code>property</code>","text":"<p>The line segment's width.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The line's resolution.</p> <p>The line is drawn as a small cylinder using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.getPointFrom","title":"<code>getPointFrom()</code>","text":"<p>Returns the line segment's first endpoint.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The line segment's first endpoint as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.getPointTo","title":"<code>getPointTo()</code>","text":"<p>Returns the line segment's second endpoint.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The line segment's second endpoint as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.line3d.Line3D.length","title":"<code>length()</code>","text":"<p>Calculates the length of the line segment.</p> <p>Returns:</p> Type Description <code>float</code> <p>The length of the line segment.</p>"},{"location":"shapes.html#vvrpywork.shapes.arrow3d.Arrow3D","title":"<code>Arrow3D(start, end, width=1, resolution=20, color=(0, 0, 0), cone_to_cylinder_ratio=0.1)</code>","text":"<p>             Bases: <code>Line3D</code></p> <p>A class used to represent an arrow in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the arrow's start.</p> required <code>end</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the arrow's end.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed arrow.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed arrow.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed arrow (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>cone_to_cylinder_ratio</code> <code>Number</code> <p>the percentage of the arrow's length that is taken up by the arrow head.</p> <code>0.1</code>"},{"location":"shapes.html#vvrpywork.shapes.arrow3d.Arrow3D.cone_to_cylinder_ratio","title":"<code>cone_to_cylinder_ratio: Number</code>  <code>property</code>","text":"<p>The percentage of the arrow's length that is taken up by the arrow head.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D","title":"<code>Sphere3D(p, radius=1, resolution=20, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a sphere in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the center.</p> required <code>radius</code> <code>Number</code> <p>The sphere's radius.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed sphere.</p> <code>20</code> <code>width</code> <code>Number</code> <p>The width of the displayed sphere (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed sphere (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the sphere or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.radius","title":"<code>radius: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's radius.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The sphere's resolution.</p> <p>The sphere is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the sphere or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.getPointCenter","title":"<code>getPointCenter()</code>","text":"<p>Returns the sphere's center.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The sphere's center point as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.sphere3d.Sphere3D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the sphere.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point3D</code> <p>The point to check (if it's inside the sphere).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the sphere (incl. the outline), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D","title":"<code>Cuboid3D(p1, p2, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a cuboid in 3D space.</p> <p>A class used to represent a cuboid in 3D space. The cuboid has to be axis-aligned. If you need a cuboid that supports rotation, use the more flexible (but less robust) <code>Cuboid3DGeneralized</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of one vertex.</p> required <code>p2</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of another vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed cuboid (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed cuboid (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the cuboid or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.x_min","title":"<code>x_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.y_min","title":"<code>y_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.z_min","title":"<code>z_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.x_max","title":"<code>x_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.y_max","title":"<code>y_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.z_max","title":"<code>z_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the cuboid or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d.Cuboid3D.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the cuboid by a vector.</p> <p>Translates the cuboid by <code>translation</code>. This is mostly useful when the min/max coordinate values would switch if you applied the translation individually to each vertex.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The translation vector. Its coordinates will be added to the cuboid's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized","title":"<code>Cuboid3DGeneralized(cuboid)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a cuboid in 3D space.</p> <p>A class used to represent a cuboid in 3D space. The cuboid may be translated and rotated. If you need a cuboid that supports more complex deformations, use a <code>Mesh3D</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>cuboid</code> <code>Cuboid3D</code> <p>The <code>Cuboid3D</code> object to copy.</p> required"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the cuboid or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the cuboid by a vector.</p> <p>Translates the cuboid by <code>translation</code>.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The translation vector. Its coordinates will be added to the cuboid's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.cuboid3d_generalized.Cuboid3DGeneralized.rotate","title":"<code>rotate(angle, axis)</code>","text":"<p>Rotates the cuboid.</p> <p>Rotates the cuboid using a rotation represented as axis-angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Number</code> <p>The angle to rotate the cuboid.</p> required <code>axis</code> <code>NDArray3 | List3 | Tuple3</code> <p>The axis about which to rotate the cuboid.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D","title":"<code>PointSet3D(points=None, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of points in 3D space.</p> <p>Inits a PointSet3D containing <code>points</code>. If <code>points</code> is <code>None</code>, the pointset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the pointset.</p> <code>None</code> <code>size</code> <code>Number</code> <p>The size of the displayed points.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed points (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the displayed points.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.getPointAt","title":"<code>getPointAt(index)</code>","text":"<p>Returns the point at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired point is placed inside the pointset.</p> required <p>Returns:</p> Type Description <code>Point3D</code> <p>The point at the specified index as a <code>Point3D</code> object. It retains its size and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.add","title":"<code>add(point)</code>","text":"<p>Appends a point to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point3D</code> <p>The <code>Point3D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.createRandom","title":"<code>createRandom(bound, num_points, seed=None, color=(0, 0, 0))</code>","text":"<p>Appends random points to the pointset.</p> <p>Uniformly generates random points inside a region and appends them to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>bound</code> <code>Cuboid3D</code> <p>The area inside of which the random points will be generated.</p> required <code>num_points</code> <code>int</code> <p>How many points to generate.</p> required <code>seed</code> <code>None | int | str</code> <p>An optional seed for the RNG.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the generated points.</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a point from the pointset.</p> <p>Removes a point from the pointset's specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed point is placed inside the pointset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.clear","title":"<code>clear()</code>","text":"<p>Clears the pointset.</p> <p>Clears the pointset, completely removing all points and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.getAABB","title":"<code>getAABB()</code>","text":"<p>Returns the AABB of the pointset.</p> <p>Returns the Axis Aligned Bounding Box of the points in the pointset.</p> <p>Returns:</p> Type Description <code>Cuboid3D</code> <p>The AABB of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.pointset3d.PointSet3D.remove_duplicated_points","title":"<code>remove_duplicated_points()</code>","text":"<p>Removes points that exist multiple times in the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D","title":"<code>LineSet3D(points=None, lines=None, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of lines in 3D space.</p> <p>Inits a LineSet3D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in pairs i.e., (0, 1), (2, 3), etc.</p> <p>If <code>points</code> is <code>None</code>, the lineset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the lineset.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.lines","title":"<code>lines: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The point indices indicating lines of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The width of the displayed lines.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The lines' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.getLineAt","title":"<code>getLineAt(index)</code>","text":"<p>Returns the line at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired line is placed inside the lineset.</p> required <p>Returns:</p> Type Description <code>Line3D</code> <p>The line at the specified index as a <code>Line3D</code> object. It retains its width and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.add","title":"<code>add(line)</code>","text":"<p>Appends a line to the lineset.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>Line3D</code> <p>The <code>Line3D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a line from the lineset.</p> <p>Removes a line from the lineset's specified index (does not affect LineSet3D.points in any way).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed line is placed inside the lineset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.clear","title":"<code>clear()</code>","text":"<p>Clears the lineset.</p> <p>Clears the lineset, completely removing all points, lines and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.lineset3d.LineSet3D.create_from_mesh","title":"<code>create_from_mesh(mesh, width=1, color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a Lineset3D object from a Mesh3D object.</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh3D</code> <p>The mesh to be turned into a lineset.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <p>Returns:</p> Type Description <code>LineSet3D</code> <p>The Lineset3D object extracted from the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D","title":"<code>Mesh3D(path=None, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a triangle mesh in 3D space.</p> <p>Inits a Mesh3D from a specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>None | str</code> <p>The path to a file describing a triangle mesh.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed mesh (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.vertices","title":"<code>vertices: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The vertices of the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.triangles","title":"<code>triangles: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The triangles (as indices to <code>points</code>) of the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.vertex_normals","title":"<code>vertex_normals: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The normals of each vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.triangle_normals","title":"<code>triangle_normals: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The normals of each triangle.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The mesh's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.vertex_colors","title":"<code>vertex_colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>A specific color for each vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.remove_duplicated_vertices","title":"<code>remove_duplicated_vertices()</code>","text":"<p>Removes duplicated vertices.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.remove_unreferenced_vertices","title":"<code>remove_unreferenced_vertices()</code>","text":"<p>Removes unreferenced vertices.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.create_bunny","title":"<code>create_bunny(color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a mesh of the Stanford Bunny.</p> <p>Returns:</p> Type Description <code>Mesh3D</code> <p>The <code>Mesh3D</code> object of the Stanford Bunny.</p>"},{"location":"shapes.html#vvrpywork.shapes.mesh3d.Mesh3D.create_armadillo","title":"<code>create_armadillo(color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a mesh of the Stanford Armadillo.</p> <p>Returns:</p> Type Description <code>Mesh3D</code> <p>The <code>Mesh3D</code> object of the Stanford Armadillo.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D","title":"<code>Label3D(p, text, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a text label in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the label's anchor (top-left).</p> required <code>text</code> <code>str</code> <p>The text of the label.</p> required <code>size</code> <code>Number</code> <p>The font size of the label.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the text (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor x-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor y-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor z-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's text.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font size.</p>"},{"location":"shapes.html#vvrpywork.shapes.label3d.Label3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font color in RGBA format.</p>"}]}